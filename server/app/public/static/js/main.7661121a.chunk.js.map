{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TweetsChart","props","tweets","chartData","map","tweet","Date","parse","created_at","type","length","options","title","text","xAxis","dateTimeLabelFormats","day","series","data","highcharts","Highcharts","App","state","axios","defaults","baseURL","get","then","response","console","log","setState","catch","error","this","fetchData","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wVAOA,SAASA,EAAYC,GACnB,IAAMC,EAASD,EAAMC,OAEfC,EAAYD,EAAOE,KAAI,SAAAC,GAAK,MAAE,CAACC,KAAKC,MAAMF,EAAMG,YAAYH,EAAMJ,EAAMQ,UAE9E,GAAsB,IAAlBP,EAAOQ,OACT,OAAO,KAEP,IAAMC,EAAU,CACdC,MAAO,CACLC,KAAMZ,EAAMW,OAEdE,MAAO,CACLL,KAAM,WACNM,qBAAsB,CAClBC,IAAK,aAGXC,OAAQ,CAAC,CACPR,KAAM,MACNS,KAAMf,KAMV,OACE,kBAAC,IAAD,CACEgB,WAAYC,IACZT,QAASA,I,IA+CFU,E,YAzCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAAEpB,OAAQ,IAFX,E,yEAKD,IAAD,OACVqB,IAAMC,SAASC,QAAU,yCAGzBF,IAAMG,IADM,SAETC,MAAK,SAACC,GAELC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAE7B,OAAQ0B,EAASV,UAElCc,OAAM,SAAUC,GAEfJ,QAAQC,IAAIG,MAEbN,MAAK,iB,0CAKRO,KAAKC,c,+BAKL,OACE,yBAAKC,UAAU,OAGb,kBAACpC,EAAD,CAAaE,OAAQgC,KAAKZ,MAAMpB,OAAQO,KAAK,gBAAgBG,MAAM,4BACnE,kBAACZ,EAAD,CAAaE,OAAQgC,KAAKZ,MAAMpB,OAAQO,KAAK,iBAAiBG,MAAM,iC,GAnC1DyB,aC7BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMmB,c","file":"static/js/main.7661121a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nimport './App.css';\n\nfunction TweetsChart(props) {\n  const tweets = props.tweets\n\n  const chartData = tweets.map(tweet=>[Date.parse(tweet.created_at),tweet[props.type]])\n  // console.log(tweets)\n  if (tweets.length === 0) {\n    return null\n  } else {\n    const options = {\n      title: {\n        text: props.title\n      },\n      xAxis: {\n        type: 'datetime',\n        dateTimeLabelFormats: {\n            day: '%e of %b'\n        }\n    },\n      series: [{\n        type: 'bar',\n        data: chartData,\n        // pointStart: Date.UTC(2010, 0, 1),\n        // pointInterval: 24 * 3600 * 1000 // one day\n      }]\n    }\n\n    return (\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n      />\n    )\n  }\n}\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { tweets: [] }\n  }\n\n  fetchData() {\n    axios.defaults.baseURL = 'https://rocky-mesa-09234.herokuapp.com';\n\n    const url = '/data';\n    axios.get(url)\n      .then((response) => {\n        // handle success\n        console.log(response);\n        this.setState({ tweets: response.data })\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function () {\n        // always executed\n      });\n  }\n  componentDidMount() {\n    this.fetchData()\n  }\n  render() {\n\n   \n    return (\n      <div className=\"App\">\n\n\n        <TweetsChart tweets={this.state.tweets} type=\"retweet_count\" title=\"Trump Tweets - retweets\"/>\n        <TweetsChart tweets={this.state.tweets} type=\"favorite_count\" title=\"Trump Tweets - favorite\"/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}